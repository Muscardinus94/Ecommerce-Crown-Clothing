{"ast":null,"code":"import firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport \"firebase/auth\";\nlet config = {\n  apiKey: \"AIzaSyC5JtvcQSOjgusn5q2EE1nmfzgG5Gqxvtw\",\n  authDomain: \"ecommerce-crwn-clothing.firebaseapp.com\",\n  projectId: \"ecommerce-crwn-clothing\",\n  storageBucket: \"ecommerce-crwn-clothing.appspot.com\",\n  messagingSenderId: \"192002978198\",\n  appId: \"1:192002978198:web:5bc14e3f29384d0e69adb7\",\n  measurementId: \"G-50VVX4TYWE\"\n};\nfirebase.initializeApp(config);\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: \"select_account\"\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\n\nfunction isPromise(promise) {\n  return !!promise && typeof promise.then === \"function\";\n}\n\nexport const createUserProfileDocument = async (userAuth, additiondalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapShot = await userRef.get();\n\n  if (!snapShot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additiondalData\n      });\n    } catch (error) {\n      console.log(\"error creating user\", error.message);\n    }\n  }\n\n  return userRef;\n};\nexport default firebase;","map":{"version":3,"sources":["/Users/jae/Desktop/ecommerce-crwn-clothing/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","initializeApp","auth","firestore","provider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup","isPromise","promise","then","createUserProfileDocument","userAuth","additiondalData","userRef","doc","uid","snapShot","get","exists","displayName","email","createdAt","Date","set","error","console","log","message"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,cAArB;AACA,OAAO,oBAAP;AACA,OAAO,eAAP;AAEA,IAAIC,MAAM,GAAG;AACXC,EAAAA,MAAM,EAAE,yCADG;AAEXC,EAAAA,UAAU,EAAE,yCAFD;AAGXC,EAAAA,SAAS,EAAE,yBAHA;AAIXC,EAAAA,aAAa,EAAE,qCAJJ;AAKXC,EAAAA,iBAAiB,EAAE,cALR;AAMXC,EAAAA,KAAK,EAAE,2CANI;AAOXC,EAAAA,aAAa,EAAE;AAPJ,CAAb;AAUAR,QAAQ,CAACS,aAAT,CAAuBR,MAAvB;AAEA,OAAO,MAAMS,IAAI,GAAGV,QAAQ,CAACU,IAAT,EAAb;AACP,OAAO,MAAMC,SAAS,GAAGX,QAAQ,CAACW,SAAT,EAAlB;AAEP,MAAMC,QAAQ,GAAG,IAAIZ,QAAQ,CAACU,IAAT,CAAcG,kBAAlB,EAAjB;AACAD,QAAQ,CAACE,mBAAT,CAA6B;AAC3BC,EAAAA,MAAM,EAAE;AADmB,CAA7B;AAGA,OAAO,MAAMC,gBAAgB,GAAG,MAAMN,IAAI,CAACO,eAAL,CAAqBL,QAArB,CAA/B;;AAEP,SAASM,SAAT,CAAmBC,OAAnB,EAA4B;AAC1B,SAAO,CAAC,CAACA,OAAF,IAAa,OAAOA,OAAO,CAACC,IAAf,KAAwB,UAA5C;AACD;;AAED,OAAO,MAAMC,yBAAyB,GAAG,OAAOC,QAAP,EAAiBC,eAAjB,KAAqC;AAC5E,MAAI,CAACD,QAAL,EAAe;AACf,QAAME,OAAO,GAAGb,SAAS,CAACc,GAAV,CAAe,SAAQH,QAAQ,CAACI,GAAI,EAApC,CAAhB;AACA,QAAMC,QAAQ,GAAG,MAAMH,OAAO,CAACI,GAAR,EAAvB;;AACA,MAAI,CAACD,QAAQ,CAACE,MAAd,EAAsB;AACpB,UAAM;AAAEC,MAAAA,WAAF;AAAeC,MAAAA;AAAf,QAAyBT,QAA/B;AACA,UAAMU,SAAS,GAAG,IAAIC,IAAJ,EAAlB;;AACA,QAAI;AACF,YAAMT,OAAO,CAACU,GAAR,CAAY;AAAEJ,QAAAA,WAAF;AAAeC,QAAAA,KAAf;AAAsBC,QAAAA,SAAtB;AAAiC,WAAGT;AAApC,OAAZ,CAAN;AACD,KAFD,CAEE,OAAOY,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCF,KAAK,CAACG,OAAzC;AACD;AACF;;AACD,SAAOd,OAAP;AACD,CAdM;AAgBP,eAAexB,QAAf","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport \"firebase/auth\";\n\nlet config = {\n  apiKey: \"AIzaSyC5JtvcQSOjgusn5q2EE1nmfzgG5Gqxvtw\",\n  authDomain: \"ecommerce-crwn-clothing.firebaseapp.com\",\n  projectId: \"ecommerce-crwn-clothing\",\n  storageBucket: \"ecommerce-crwn-clothing.appspot.com\",\n  messagingSenderId: \"192002978198\",\n  appId: \"1:192002978198:web:5bc14e3f29384d0e69adb7\",\n  measurementId: \"G-50VVX4TYWE\",\n};\n\nfirebase.initializeApp(config);\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\n\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: \"select_account\",\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\n\nfunction isPromise(promise) {\n  return !!promise && typeof promise.then === \"function\";\n}\n\nexport const createUserProfileDocument = async (userAuth, additiondalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapShot = await userRef.get();\n  if (!snapShot.exists) {\n    const { displayName, email } = userAuth;\n    const createdAt = new Date();\n    try {\n      await userRef.set({ displayName, email, createdAt, ...additiondalData });\n    } catch (error) {\n      console.log(\"error creating user\", error.message);\n    }\n  }\n  return userRef;\n};\n\nexport default firebase;\n"]},"metadata":{},"sourceType":"module"}